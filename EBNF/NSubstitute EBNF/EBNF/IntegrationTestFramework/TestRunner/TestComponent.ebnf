(* ----------------- Finish the Class and depending interfaces/classes -------------- *)

<include> := <ITestComponent.ebnf>
             <NullTestComponentImpl.ebnf>

<IncludedPlatformsStates> :=    "WindowsEditor" 
                                "OSXEditor" 
                                "WindowsPlayer" 
                                "OSXPlayer" 
                                "LinuxPlayer" 
                                "MetroPlayerX86" 
                                "MetroPlayerX64" 
                                "MetroPlayerARM" 
                                "WindowsWebPlayer" 
                                "OSXWebPlayer" 
                                "Android" 
                                "IPhonePlayer" 
                                "TizenPlayer" 
                                "WP8Player" 
                                "BB10Player" 
                                "NaCl" 
                                "PS3" 
                                "XBOX360" 
                                "WiiPlayer" 
                                "PSP2"
                                "PS4" 
                                "PSMPlayer" 
                                "XboxOne"
                                
<IncludedPlatforms> := <enumerator> "IncludedPlatforms {"
                                        <IncludedPlatformsStates>
                                    "}" 
 
<imports> :=    "System" 
                "System.Collections.Generic"
                "System.Linq"
                "System.Reflection"
                "UnityEngine" 
                "UnityEngine.SceneManagement"
                "UnityEditor"
                
 <nameSpace> := "UnityTest"
 
 <access> := "public"
 <className> := "TestComponent" 
 <inherits> := "MonoBehavior"
 <implements> := <ITestComponent>
 
 <NullTestComponent> := "static" <ITestComponent> "NullTestComponent = NullTestComponentImpl()"
 <timeout> := <FLOAT_LITERAL> "timeout = 5"
 <ignored> := <BOOLEAN_LITERAL> "ignored = false"
 <succeedAfterAllAssertionsAreExecuted> := <BOOLEAN_LITERAL> "succeedAfterAllAssertionsAreExecuted = false"
 <expectedExceptionList> := <STRING_LITERAL> "expectedExceptionList = \"\""
 <succeedWhenExceptionIsThrown> := <BOOLEAN_LITERAL> "succeedWhenExceptionIsThrown = false"
 <includedPlatforms> := <IncludedPlatforms> "includedPlatforms = (IncludedPlatforms) ~0L"
 <platformsToIgnore> := <stringArray> "platformsToIgnore = null"
 <dynamic> := <BOOLEAN_LITERAL> "dynamic"
 <dynamicTypeName> := <STRING_LITERAL> "dynamicTypeName"
 
 <publicFields> :=  <NullTestComponent>
                    <timeout>
                    <ignored>
                    <succeedAfterAllAssertionsAreExecuted>
                    <expectException>
                    <expectedExceptionList>
                    <succeedWhenExceptionIsThrown>
                    <includedPlatforms>
                    <platformsToIgnore>
                    <dynamic>
                    <dynamicTypeName>
                    <IncludedPlatforms>
                    
<Name> := <STRING_LITERAL> "Name"
 
<publicProperties> := <Name>
 
<IsAssignableFrom> := "static" <BOOLEAN_LITERAL> "IsAssignableFrom(" <cSharpType> ", " <cSharpType> ")"
<GetTypeByName> := "static" <cSharpType> "GetTypeByName(" <STRING_LITERAL> ")"
<CreateTest> := "static" <GameObject> "CreateTest(" <STRING_LITERAL> ")"
 
<IsExludedOnThisPlatform> := <BOOLEAN_LITERAL> "IsExludedOnThisPlatform()"
<IsExceptionExpected> := <BOOLEAN_LITERAL> "IsExceptionExpected(" <STRING_LITERAL> ")"
<ShouldSucceedOnException> := <BOOLEAN_LITERAL> "ShouldSucceedOnException()"
<GetTimeout> := <DOUBLE_LITERAL> "GetTimeout()"
<IsIgnored> := <BOOLEAN_LITERAL> "IsIgnored()"
<ShouldSucceedOnAssertions> := <BOOLEAN_LITERAL> "ShouldSucceedOnAssertions()"
<OnValidate> := <void> "OnValidate()"
<EnableTest> := <void> "EnableTest(" <BOOLEAN_LITERAL> ")"
<CompareTo> := <INTEGER_LITERAL> "CompareTo(" <ITestComponent> ")"
<IsTestGroup> := <BOOLEAN_LITERAL> "IsTestGroup()"
<GetTestGroup> := <ITestComponent> "GetTestGroup()"
<Equals> := "override" <BOOLEAN_LITERAL> "Equals(" <cSharpObject> ")"
<GetHashCode> := "override" <INTEGER_LITERAL> "GetHashCode()"
<operator "=="> := "static" <BOOLEAN_LITERAL> "operator == (" <TestComponent> ", " <TestComponent> ")"
<operator "!="> := "static" <BOOLEAN_LITERAL> "operator != (" <TestComponent> ", " <TestComponent> ")" 
<CreateDynamicTest> := "static" <TestComponent> "CreateDynamicTest(" <cSharpType> ")"
<CreateTest> := "static" <GameObject> "CreateTest()"
<FindAllTestsOnScene> := "static" <ListGenerics><TestComponent> "FindAllTestsOnScene()"
<FindAllTopTestsOnScene> := "static" <ListGenerics><TestComponent> "FindAllTopTestsOnScene()"
<DestroyAllDynamicTests> := "static" <void> "DestroyAllDynamicTests()"
<DisableAllTests> := "static" <void> "DisableAllTests()"
<AnyTestsOnScene> := "static" <BOOLEAN_LITERAL> "AnyTestsOnScene()"
<AnyDynamicTestForCurrentScene> := "static" <BOOLEAN_LITERAL> "AnyDynamicTestForCurrentScene()"
<GetTypesWithHelpAttribute> := "static" <IEnumerable> <cSharpType> "GetTypesWithHelpAttribute(" <STRING_LITERAL> ")"
 
<publicMethods> := <IsExludedOnThisPlatform> |
                   <IsExceptionExpected> |
                   <ShouldSucceedOnException> |
                   <GetTimeout> |
                   <IsIgnored> |
                   <ShouldSucceedOnAssertions> |
                   <OnValidate> |
                   <EnableTest> |
                   <CompareTo> |
                   <IsTestGroup> | 
                   <GetTestGroup> |
                   <Equals> |
                   <GetHashCode> |  
                   <operator "=="> |
                   <operator "!="> |
                   <CreateDynamicTest> |
                   <CreateTest> |
                   <FindAllTestsOnScene> |
                   <FindAllTopTestsOnScene> |
                   <FindAllDynamicTestsOnScene> |
                   <DestroyAllDynamicTests> |
                   <DisableAllTests> |
                   <AnyTestsOnScene> |
                   <AnyDynamicTestForCurrentScene> |
                   <GetTypesWithHelpAttribute>  
                    
<privateMethods> := <IsAssignableFrom> |
                     <GetTypeByName> |
                     <CreateTest>
                       
<subclasses> := <NullTestComponentImpl>
<subinterfaces> := <ITestComponent>

<TestComponent> :=  <imports>
                    <nameSpace>
                    <access>
                    <className>
                    <inherits>
                    <implements>
                    <publicFields>
                    <publicProperties>
                    <publicMethods>
                    <privateMethods>
                    <subclasses>
                    <subinterfaces>            
