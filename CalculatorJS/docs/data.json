{
    "project": {},
    "files": {
        "calc.js": {
            "name": "calc.js",
            "modules": {
                "APP": 1
            },
            "classes": {
                "APP": 1,
                "Constants": 1,
                "Main": 1,
                "Aritmetic": 1,
                "Buttons": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "APP": {
            "name": "APP",
            "submodules": {},
            "classes": {
                "APP": 1,
                "Constants": 1,
                "Main": 1,
                "Aritmetic": 1,
                "Buttons": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "calc.js",
            "line": 365,
            "description": "Main application module that contains all necessary classes/objects,\nmethods and properties for the Calculator application."
        }
    },
    "classes": {
        "APP": {
            "name": "APP",
            "shortname": "APP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "APP",
            "namespace": "",
            "file": "calc.js",
            "line": 147,
            "description": "Creates objects and subobjects by using just a string in dotted notation. \nExample namespace('my.new.namespace'); will create object 'my' that contains subobject 'new', which contains \nsubobject 'namespace'.",
            "itemtype": "method",
            "params": [
                {
                    "name": "String",
                    "description": "describing the namespace of objects separated by a dots.",
                    "type": "String"
                },
                {
                    "name": "And",
                    "description": "object to initialize each of the newly created subobject. If you add a property with all caps it will consider it as a\nconstant and therefore use Constants object to create new constant that cannot be changed using Firebug and console.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the new object that represents the new namespace of objects and subobjects, defined by the dots in the string\nargument.",
                "type": "Object"
            }
        },
        "Constants": {
            "name": "Constants",
            "shortname": "Constants",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "APP",
            "namespace": "",
            "file": "calc.js",
            "line": 65,
            "description": "Constants is a contructor so it should be called with new keyword. Each object should have its own Constants object.\nCreates object of four functions, set(), isDefined(), list() and get() which enable creation of new immutable constant\nthat cannot be changed with Firebug or other debugging tool.",
            "contructor": "Constants",
            "params": [
                {
                    "name": "constMapObject",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returs object with functions necessary to define new constant and prevent its change.",
                "type": "Object"
            }
        },
        "Main": {
            "name": "Main",
            "shortname": "Main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "APP",
            "namespace": "",
            "file": "calc.js",
            "line": 239,
            "description": "Main calculator class. Contains all necessary Calculator related properties/methods."
        },
        "Aritmetic": {
            "name": "Aritmetic",
            "shortname": "Aritmetic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "APP",
            "namespace": "",
            "file": "calc.js",
            "line": 253,
            "description": "Arithmetic module. Contains all necessary properties/methods related to aritmetic operations. \nLike, addition, multiplication, division, etc... All aritmetic operations are binary operations, i.e need two\noperands to work."
        },
        "Buttons": {
            "name": "Buttons",
            "shortname": "Buttons",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "APP",
            "namespace": "",
            "file": "calc.js",
            "line": 365,
            "description": "Buttons class. Contains all necessary properties/methods related to the visible buttons."
        }
    },
    "classitems": [
        {
            "file": "calc.js",
            "line": 26,
            "description": "Returns application's name as a string value.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "Returs the application's name in string format.",
                "type": "String"
            },
            "class": "APP",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 35,
            "description": "Returns application's version as a string value.",
            "itemtype": "method",
            "name": "getVersion",
            "return": {
                "description": "Returs the application's version in string format.",
                "type": "String"
            },
            "class": "APP",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 44,
            "description": "Prints the application's internal state in console.",
            "itemtype": "method",
            "name": "printData",
            "return": {
                "description": "Returs the main APP object.",
                "type": "Object"
            },
            "class": "APP",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 86,
            "description": "Creates new immuatble constant.",
            "itemtype": "method",
            "name": "set",
            "return": {
                "description": "Returs true if new constant is created or false otherwise.",
                "type": "Boolean"
            },
            "class": "Constants",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 100,
            "todo": [
                "use constMapObject to create new constant key in the given constants map object."
            ],
            "class": "Constants",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 106,
            "description": "Creates new immuatble constant.",
            "itemtype": "method",
            "name": "isDefined",
            "return": {
                "description": "Returs true if new constant is created or false otherwise.",
                "type": "Boolean"
            },
            "class": "Constants",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 115,
            "description": "Returns the value of the required constant.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "Returns the value of the required constant.",
                "type": "Object"
            },
            "class": "Constants",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 127,
            "description": "Lists all constants with their values in array like format. Useful in JavaScript console.",
            "itemtype": "method",
            "name": "list",
            "class": "Constants",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 193,
            "description": "Creates new immutable constant of the main application object.",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "Returs the main APP object. false if the creation failed somehow. It is called upon page load, so\nall necessary initializations which cannot be called befor page load should be called in this function.",
                "type": "Object"
            },
            "class": "APP",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 213,
            "description": "Parses string value into decimal integer number if possible, and then returns the result.",
            "itemtype": "method",
            "name": "myParseInt",
            "params": [
                {
                    "name": "param",
                    "description": "param string value that should be a number."
                }
            ],
            "return": {
                "description": "Returns decimal integer representation of given string value.",
                "type": "Number"
            },
            "class": "APP",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 223,
            "description": "Parses string value into decimal floating point number if possible, and then returns the result.",
            "itemtype": "method",
            "name": "myParseFloat",
            "params": [
                {
                    "name": "param",
                    "description": "string value that should be a number."
                }
            ],
            "return": {
                "description": "Returns decimal floating point representation of given string value.",
                "type": "Number"
            },
            "class": "APP",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 263,
            "description": "Divide method. Divides \"result\" operand with the value in the display field. It also checks for division by zero.",
            "itemtype": "method",
            "name": "divide",
            "class": "Aritmetic",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 279,
            "description": "Multiply method. Multiplies \"result\" operand with the value in the display field.",
            "itemtype": "method",
            "name": "multiply",
            "class": "Aritmetic",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 293,
            "description": "Add method. Adds \"result\" operand to the value in the display field.",
            "itemtype": "method",
            "name": "add",
            "class": "Aritmetic",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 307,
            "description": "Subtract method. Subtracts the value in the display field from \"result\" operand.",
            "itemtype": "method",
            "name": "subtract",
            "class": "Aritmetic",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 321,
            "description": "Percent method. It needs both \"result\" and display field values to be different than 0 to work. \nTherefore an aritmetic operation must be used before you can calculate percents of a given value. \nExample: Press number 555 and then press the plus(+) sign button. \"result\" operand now has the value of 555\nand the application waits for input for the second operand. Insert value of 33 and then press the percent(%) \nbutton. The application finds there are two available operands so it calculates 33% of 555 which is 183.15 and\nsets the display field to this new percent value. If you press the equal(=) sign button, it will sum up 555 + 183.15 \nwhich is 738.15. This same set of tasks applies to all other binary operations so if we used division(/) instead of \nadtion(+) the final result would be 3.030303 or (555 / (33% of 555)) = (555 / 183.15)",
            "itemtype": "method",
            "name": "percent",
            "class": "Aritmetic",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 373,
            "description": "pressNumber method (called upon pressing one of 0, 1, 2, 3, 4, 5, 6, 7, 8 or 9 buttons) is a method that receives one parameter\nin string format from one of these '1', '2', ..., '9'. If eraseData key is true, digits field value is cleared and number param value is \nconcatenated to digits field, then eraseData is set to false. If eraseData is set to false then any new number button pressed concatenates\nits value to digits display field without clearing digits field previous value.",
            "itemtype": "method",
            "name": "pressNumber",
            "params": [
                {
                    "name": "number",
                    "description": "number value in string format. It may be some of these values '1', '2', ..., '9'"
                }
            ],
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 398,
            "description": "pressUnaryOperation method (called upon pressing one of square root('sqrt'), reciproc('1/x') or negate('+/-') buttons)\nrecieves some of these values: 'sqrt', '1/x', '+/-'. It needs only one operand to work\nsince the operations are unary. It also takes cleares the operations text field from uncessary rubbish text.",
            "itemtype": "method",
            "name": "pressUnaryOperation",
            "params": [
                {
                    "name": "op",
                    "description": "operation value in string format. It may be some of these values 'sqrt'(square root), '1/x'(reciproc), '+/-'(negate)."
                }
            ],
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 466,
            "description": "pressBinaryOperation method (called upon pressing plus('+'), minus('-'), division('/'), multiplication('*') or percent('%') buttons) \nrecieves one parameter in string format from these values: '+', '-', '/', '*', '%'. It therefore calculates the result and \ndisplays it in the digits display field according to the given operation type.",
            "itemtype": "method",
            "name": "pressBinaryOperation",
            "params": [
                {
                    "name": "op",
                    "description": "operation in string format from these values: '+', '-', '/', '*', '%'"
                }
            ],
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 504,
            "description": "pressComma method (called upon pressing comma(,) button)adds dot to the digits display field. \nIt there is already a dot it skips adding new one.",
            "itemtype": "method",
            "name": "pressComma",
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 521,
            "description": "pressUndo method (called upon pressing undo(<-) button) removes one digit from the digits siplay field. \nIf the digits display field has only one digit, it is set to zero.",
            "itemtype": "method",
            "name": "pressUndo",
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 536,
            "description": "pressClearEntry method (called upon pressing clear entry(CE) button) clears the digits display field and sets it to zero. \nIt doesn't however clear result, operation, memory, operand or operandStr.",
            "itemtype": "method",
            "name": "pressClearEntry",
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 546,
            "description": "pressClear method (called upon pressing (C) button) clears all application state except for the memory property which is \nused to memorize values that last even after we do many calculations.",
            "itemtype": "method",
            "name": "pressClear",
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 560,
            "description": "calculate method takes the value from digits field and sets result to it if result is empty. If result is not empty it takes\nthe operation value and applies apropriate binary operation on \"result\" operand and digits display field value. It then empties result\nand operation properties.",
            "itemtype": "method",
            "name": "calculate",
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 589,
            "description": "pressMemoryButton method (called upon pressing one of MC (Memory Clear), MR (Memory Recall), MS (Memory Save), M+ (Memory Add) or M- (Memory Subtract) * memory buttons) saves current digits field value into parent.memory property and shows M label in view, when MS button is pressed. \nWhen MR button is pressed, digits field is filled with value from parent.memory property if available. When M+ or M- buttons are pressed, \ndigits field value is added or subtract from the current memory value (if set) and saved to parent.memory property. \nMR button sets digits field value to zero if parent.memory is empty or to parent.memory value if not empty. \nMC sets parent.memory property to empty string and hides M label from view.",
            "itemtype": "method",
            "name": "pressMemoryButton",
            "params": [
                {
                    "name": "memoryStr",
                    "description": "string value which can be some these MC, MR, MS, M+, M-"
                }
            ],
            "class": "Buttons",
            "module": "APP"
        },
        {
            "file": "calc.js",
            "line": 638,
            "description": "pressEqual method (called upon pressing equal(=) button)call calculate() method to do the calculation on \"result\" and \ndigits display value and resets operand to 0 and operation field value to empty string ''.",
            "itemtype": "method",
            "name": "pressEqual",
            "class": "Buttons",
            "module": "APP"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: contructor",
            "line": " calc.js:65"
        },
        {
            "message": "Missing item type",
            "line": " calc.js:100"
        }
    ]
}